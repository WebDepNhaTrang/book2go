<?php

namespace Botble\{Plugin}\Http\Controllers;

use Botble\{Plugin}\Http\Requests\{Plugin}Request;
use Botble\{Plugin}\Repositories\Interfaces\{Plugin}Interface;
use Botble\Base\Http\Controllers\BaseController;
use Illuminate\Http\Request;
use MongoDB\Driver\Exception\Exception;
use Botble\{Plugin}\Tables\{Plugin}Table;
use Botble\Base\Events\CreatedContentEvent;
use Botble\Base\Events\DeletedContentEvent;
use Botble\Base\Events\UpdatedContentEvent;
use Botble\Base\Http\Responses\AjaxResponse;
use Botble\{Plugin}\Forms\{Plugin}Form;
use Botble\Base\Forms\FormBuilder;

class {Plugin}Controller extends BaseController
{
    /**
     * @var {Plugin}Interface
     */
    protected ${plugin}Repository;

    /**
     * {Plugin}Controller constructor.
     * @param {Plugin}Interface ${plugin}Repository
     * @author Sang Nguyen
     */
    public function __construct({Plugin}Interface ${plugin}Repository)
    {
        $this->{plugin}Repository = ${plugin}Repository;
    }

    /**
     * Display all {plugin}
     * @param {Plugin}Table $dataTable
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     * @author Sang Nguyen
     */
    public function getList({Plugin}Table $dataTable)
    {

        page_title()->setTitle(trans('{plugin}::{plugin}.list'));

        return $dataTable->renderTable(['title' => trans('{plugin}::{plugin}.list')]);
    }

    /**
     * @param FormBuilder $formBuilder
     * @return string
     * @author Sang Nguyen
     */
    public function getCreate(FormBuilder $formBuilder)
    {
        page_title()->setTitle(trans('{plugin}::{plugin}.create'));

        return $formBuilder->create({Plugin}Form::class)->renderForm();
    }

    /**
     * Insert new {Plugin} into database
     *
     * @param {Plugin}Request $request
     * @return \Illuminate\Http\RedirectResponse
     * @author Sang Nguyen
     */
    public function postCreate({Plugin}Request $request)
    {
        ${plugin} = $this->{plugin}Repository->createOrUpdate($request->input());

        event(new CreatedContentEvent({PLUGIN}_MODULE_SCREEN_NAME, $request, ${plugin}));

        if ($request->input('submit') === 'save') {
            return redirect()->route('{plugin}.list')->with('success_msg', trans('core.base::notices.create_success_message'));
        } else {
            return redirect()->route('{plugin}.edit', ${plugin}->id)->with('success_msg', trans('core.base::notices.create_success_message'));
        }
    }

    /**
     * Show edit form
     *
     * @param $id
     * @param FormBuilder $formBuilder
     * @return string
     * @author Sang Nguyen
     */
    public function getEdit($id, FormBuilder $formBuilder)
    {
        ${plugin} = $this->{plugin}Repository->findById($id);
        if (empty(${plugin})) {
            abort(404);
        }

        page_title()->setTitle(trans('{plugin}::{plugin}.edit') . ' #' . $id);

        return $formBuilder->create({Plugin}Form::class)->setModel(${plugin})->renderForm();
    }

    /**
     * @param $id
     * @param {Plugin}Request $request
     * @return \Illuminate\Http\RedirectResponse
     * @author Sang Nguyen
     */
    public function postEdit($id, {Plugin}Request $request)
    {
        ${plugin} = $this->{plugin}Repository->findById($id);
        if (empty(${plugin})) {
            abort(404);
        }
        ${plugin}->fill($request->input());

        $this->{plugin}Repository->createOrUpdate(${plugin});

        event(new UpdatedContentEvent({PLUGIN}_MODULE_SCREEN_NAME, $request, ${plugin}));

        if ($request->input('submit') === 'save') {
            return redirect()->route('{plugin}.list')->with('success_msg', trans('core.base::notices.update_success_message'));
        } else {
            return redirect()->route('{plugin}.edit', $id)->with('success_msg', trans('core.base::notices.update_success_message'));
        }
    }

    /**
     * @param $id
     * @param Request $request
     * @return AjaxResponse
     * @author Sang Nguyen
     */
    public function getDelete(Request $request, $id, AjaxResponse $response)
    {
        try {
            ${plugin} = $this->{plugin}Repository->findById($id);
            if (empty(${plugin})) {
                abort(404);
            }
            $this->{plugin}Repository->delete(${plugin});

            event(new DeletedContentEvent({PLUGIN}_MODULE_SCREEN_NAME, $request, ${plugin}));

            return $response->setMessage(trans('core.base::notices.delete_success_message'));
        } catch (Exception $e) {
            return $response->setError(true)->setMessage(trans('core.base::notices.cannot_delete'));
        }
    }

    /**
     * @param Request $request
     * @param AjaxResponse $response
     * @return AjaxResponse
     * @author Sang Nguyen
     */
    public function postDeleteMany(Request $request, AjaxResponse $response)
    {
        $ids = $request->input('ids');
        if (empty($ids)) {
            return $response->setError(true)->setMessage(trans('core.base::notices.no_select'));
        }

        foreach ($ids as $id) {
            ${plugin} = $this->{plugin}Repository->findById($id);
            $this->{plugin}Repository->delete(${plugin});
            event(new DeletedContentEvent({PLUGIN}_MODULE_SCREEN_NAME, $request, ${plugin}));
        }

        return $response->setMessage(trans('core.base::notices.delete_success_message'));
    }

    /**
     * @param Request $request
     * @param AjaxResponse $response
     * @return AjaxResponse
     * @author Sang Nguyen
     */
    public function postChangeStatus(Request $request, AjaxResponse $response)
    {
        $ids = $request->input('ids');
        if (empty($ids)) {
            return $response->setError(true)->setMessage(trans('core.base::notices.no_select'));
        }

        foreach ($ids as $id) {
            ${plugin} = $this->{plugin}Repository->findById($id);
            ${plugin}->status = $request->input('status');
            $this->{plugin}Repository->createOrUpdate(${plugin});

            event(new UpdatedContentEvent({PLUGIN}_MODULE_SCREEN_NAME, $request, ${plugin}));
        }

        return $response->setMessage(trans('core.base::notices.update_success_message'))->setData($request->input('status'));
    }
}
